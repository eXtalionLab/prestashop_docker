#!/bin/bash
set -e

# See https://github.com/eXtalionLab/docker-backup

script=$0

###> config ###
backupDir="backups"
backupFile=$(date +%Y%m%d_%H%M%S)
backupLogFile="$backupDir/$backupFile.log"
# See help()
backupType=$1
dockerDbInitdbDir="initdb.d"
dockerDbServiceName="db"
# Use local image to skip download
dockerImgToBackupVolumes="alpine"
dockerVolumesDir="docker_volumes"
# Allow types: custom, mysql, postgresql
dbType="mysql"
envFile=".env"
# MySQL's default "max_allowed_packet" setting is fairly conservative
# (16MB). If we try to dump a row which is larger than this limit, the
# dump will fail.
mysqlMaxAllowedPacket="1G"
###< config ###

###> files/volumes to backup ###
filesToBackup=( \
    "$envFile" \
    "cronjobs/" \
    "prestashop/" \
)
filesToExclude=( \
    "prestashop/admin292vh05fq/autoupgrade/backup" \
    "prestashop/admin292vh05fq/autoupgrade/download" \
    "prestashop/var/cache" \
    "prestashop/var/logs" \
)
# Remember to prefix volumes with docker-compose project name
volumesToBackup=()
###< files/volumes to backup ###

function help {
    echo "Run: $script type"
    echo ""
    echo "Available types:"
    echo "    all   Backup db and files"
    echo "    db    Backup db only"
    echo "    files Backup files only"

    exit
}

function log {
    echo "[$(date +"%Y-%m-%d %H:%M:%S")] $1 - $2"
}

function error {
    log "error" "$1"
    exit 1
}

function info {
    log "info" "$1"
}

function warning {
    log "warning" "$1"
}

function init {
    info "Start backup"
    createDir "$backupDir"
    decreasePriority
}

function clean {
    info "Clean after backup"

    local localDockerFileName="$dockerDbInitdbDir/dump.sql"

    if [[ -f "$localDockerFileName" ]]; then
        info "Remove sql dump \"$localDockerFileName\""
        rm "$localDockerFileName" >> "$backupLogFile" 2>&1 || ( \
            warning "Fail. See $logFile"
        )
    fi

    if [[ ${#volumesToBackup[@]} -gt 0 && "$backupType" != "db" ]]; then
        removeVolumesFilesFromLocalDir
    fi

    if [[ ! -s "$backupLogFile" ]]; then
        rm "$backupLogFile"
    fi
}

function createDir {
    local dir="$1"
    local logFile
    logFile="$(basename "$backupLogFile")"

    if [[ ! -d "$dir" ]]; then
        info "Create \"$dir\" directory"

        mkdir -p "$dir" >> "$logFile" 2>&1 || ( \
            error "Fail. See $logFile"
        )

        if [[ ! -s "$logFile" ]]; then
            rm "$logFile"
        fi
    fi
}

function decreasePriority {
    info "Decrease CPU priority"

    # Decrease the CPU priority of this process so it doesn't contend with
    # other more important things.

    renice -n 19 $$ >> /dev/null 2> "$backupLogFile"
}

function getEnv {
    local env=$1

    grep "^$env=" "$envFile" | awk -F= '{print $2}'
}

function backupCustomDb {
    local dockerFileName="$1"
    local localDockerFileName="$2"

    # Output file has to be saved to $localDockerFileName

    # Your docker service which will make a dump should has a volumes map like:
    # - $(dirname $(realpath $localDockerFileName)):$(dirname $(realpath $dockerFileName))

    # Example:
    #
    # your_command_to_dump \
    #     --output $localDockerFileName >> "$backupLogFile" 2>&1
    #
    # or
    #
    # docker-compose exec docker_service \
    #     your_command_to_dump --output $dockerFileName >> "$backupLogFile" 2>&1

    warning "Skip. Not implemented"
}

function backupMysqlDb {
    local dbName
    local dbPassword
    local dbUser

    dbName=$(getEnv "MYSQL_DATABASE")
    dbPassword=$(getEnv "MYSQL_PASSWORD")
    dbUser=$(getEnv "MYSQL_USER")

    ( \
        docker-compose exec -T "$dockerDbServiceName" mysqldump \
            --hex-blob \
            --single-transaction \
            --max-allowed-packet "$mysqlMaxAllowedPacket" \
            -r "$1" \
            -u "$dbUser" \
            -p"$dbPassword" \
            "$dbName" >> "$backupLogFile" 2>&1 \
    ) || warning "Fail. See \"$backupLogFile\""
}

function backupPostgresDb {
    local dbName
    local dbUser

    dbName=$(getEnv "POSTGRES_DB")
    dbUser=$(getEnv "POSTGRES_USER")

    ( \
        docker-compose exec -T "$dockerDbServiceName" pg_dump \
            -b \
            -f "$1" \
            -U "$dbUser" \
            "$dbName" >> "$backupLogFile" 2>&1 \
    ) || warning "Fail. See \"$backupLogFile\""
}

function doBackupFile {
    local fileName="$backupDir/$backupFile.tar.gz"
    local -n curentFilesToBackup=$1

    if [[ $# -eq 2 ]]; then
        local -n curentFilesToExclude=$2
    else
        local curentFilesToExclude=()
    fi

    (
        tar -czf "$fileName" \
            --ignore-failed-read \
            ${curentFilesToExclude[*]} \
            ${curentFilesToBackup[*]} >> "$backupLogFile" 2>&1 \
        && info "Backup file \"$fileName\"" \
    ) || warning "Fail. See \"$backupLogFile\""
}

function backupDb {
    info "Backup db"

    local dockerFileName="/docker-entrypoint-initdb.d/dump.sql"
    local localDockerFileName="$dockerDbInitdbDir/dump.sql"

    if [[ "$dbType" == "custom" ]]; then
        backupCustomDb "$dockerFileName" "$localDockerFileName"
    elif [[ "$dbType" == "mysql" ]]; then
        backupMysqlDb "$dockerFileName"
    elif [[ "$dbType" == "postgresql" ]]; then
        backupPostgresDb "$dockerFileName"
    else
        warning "Skip. Unknown db type \"$dbType\""

        return
    fi

    if [[ -f "$localDockerFileName" ]]; then
        if [[ "$backupType" == "db" ]]; then
            local tmpArray=("$localDockerFileName")
            doBackupFile tmpArray
        else
            filesToBackup+=("$localDockerFileName")
        fi
    fi
}

function moveVolumesFilesToLocalDir {
    info "Move volumes files to \"$dockerVolumesDir\""

    local volumesBind=()

    for v in "${volumesToBackup[@]}"; do
        volumesBind+=("-v $v:/volumes/$v")
    done

    docker run --rm \
        ${volumesBind[*]} \
        -v "$(realpath "$dockerVolumesDir")":/local_dir \
        "$dockerImgToBackupVolumes" \
        cp -aR /volumes/. /local_dir/. >> "$backupLogFile" 2>&1 \
    || warning "Fail. See \"$backupLogFile\""
}

function removeVolumesFilesFromLocalDir {
    info "Remove volumes files from \"$dockerVolumesDir\""

    for v in "${volumesToBackup[@]}"; do
        docker run --rm \
            -v "$(realpath "$dockerVolumesDir")":/local_dir \
            "$dockerImgToBackupVolumes" \
            rm -rf "/local_dir/$v"  >> "$backupLogFile" 2>&1
    done
}

function mapExcludeFilesToTarOption {
    for i in "${!filesToExclude[@]}"; do
        filesToExclude[$i]="--exclude=${filesToExclude[$i]}"
    done
}

function backupFiles {
    info "Backup files"

    if [[ ${#filesToBackup[@]} -eq 0 && ${#volumesToBackup[@]} -eq 0 ]]; then
        info "Skip. No files/volumes to backup"

        return
    fi

    if [[ ${#volumesToBackup[@]} -gt 0 ]]; then
        createDir "$dockerVolumesDir"
        moveVolumesFilesToLocalDir
        filesToBackup+=("$dockerVolumesDir")
    fi

    mapExcludeFilesToTarOption
    doBackupFile filesToBackup filesToExclude
}

if [[ "$backupType" == "all" ]]; then
    init
    backupDb
    backupFiles
    clean
elif [[ "$backupType" == "db" ]]; then
    init
    backupDb
    clean
elif [[ "$backupType" == "files" ]]; then
    init
    backupFiles
    clean
else
    help
fi
